/* The following code was generated by JFlex 1.5.1 */

package analisador.lexico;

import analisador.lexico.Token.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>src/analisador/lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\112\1\113\1\1\16\7\4\0\1\3\1\33"+
    "\1\25\1\0\1\6\1\35\1\36\1\26\1\72\1\73\1\5\1\24"+
    "\1\101\1\34\1\22\1\4\1\11\1\17\1\104\1\16\1\105\1\20"+
    "\1\110\1\106\1\107\1\12\1\103\1\100\1\31\1\32\1\30\1\102"+
    "\1\10\3\15\1\111\1\23\1\21\5\6\1\13\13\6\1\14\2\6"+
    "\1\76\1\27\1\77\1\40\1\6\1\0\1\42\1\43\1\47\1\61"+
    "\1\50\1\62\1\65\1\56\1\57\1\6\1\54\1\52\1\63\1\53"+
    "\1\51\1\66\1\6\1\46\1\44\1\45\1\60\1\67\1\70\1\64"+
    "\1\55\1\71\1\74\1\37\1\75\1\41\6\7\1\114\32\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6"+
    "\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7"+
    "\6\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6"+
    "\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6"+
    "\5\7\22\0\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7"+
    "\1\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7"+
    "\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0"+
    "\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0"+
    "\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7"+
    "\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7"+
    "\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0"+
    "\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0"+
    "\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6"+
    "\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0"+
    "\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7"+
    "\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7"+
    "\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7"+
    "\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6"+
    "\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\30\0\1\112\1\112\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6\7\0"+
    "\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0"+
    "\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7"+
    "\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7\34\6"+
    "\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7"+
    "\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7\10\6"+
    "\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0\60\6"+
    "\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6"+
    "\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6"+
    "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6"+
    "\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0"+
    "\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0"+
    "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\1\1\2\5\1\6"+
    "\1\3\1\7\1\10\2\11\1\3\1\12\1\3\4\13"+
    "\20\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\27\1\30\2\1\2\31"+
    "\1\1\2\0\1\3\1\32\1\33\1\34\1\35\1\0"+
    "\3\33\1\36\1\34\1\0\1\37\1\40\1\13\1\11"+
    "\1\41\1\42\1\0\1\12\31\4\1\43\2\4\1\44"+
    "\12\4\1\45\2\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\12\45\2\0\1\60\2\61"+
    "\2\33\1\34\2\0\14\4\1\62\16\4\1\63\2\4"+
    "\1\64\4\4\1\65\12\4\1\46\1\0\1\66\1\0"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\0\1\2\1\77\1\61\2\33\1\0\4\4\1\100"+
    "\7\4\1\101\1\4\1\102\1\4\1\103\4\4\1\104"+
    "\1\105\1\106\1\4\1\107\1\4\1\110\11\4\1\111"+
    "\5\4\1\112\1\4\1\61\2\33\1\0\2\4\1\113"+
    "\4\4\1\114\1\115\2\4\1\116\1\4\1\117\1\120"+
    "\1\4\1\121\10\4\1\122\1\123\1\124\5\4\1\125"+
    "\1\61\2\33\1\0\1\4\1\126\1\4\1\127\2\4"+
    "\1\130\1\4\1\131\1\132\2\4\1\133\2\4\1\134"+
    "\2\4\1\135\4\4\1\136\1\4\1\61\2\33\1\0"+
    "\1\4\1\137\4\4\1\140\3\4\1\141\1\142\1\143"+
    "\1\4\1\144\1\4\1\61\2\33\1\0\1\145\1\146"+
    "\2\4\1\147\4\4\1\150\1\61\2\33\1\0\1\4"+
    "\1\151\1\4\1\152\1\4\1\153\1\61\2\33\1\0"+
    "\1\4\1\154\1\155\1\0\2\33\1\156\1\4\1\0"+
    "\2\33\1\157\1\0\2\33\1\0\2\33\1\0\2\33"+
    "\1\0\2\33\1\0\1\33\1\34\1\0\5\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\347\0\u0181\0\u01ce"+
    "\0\u021b\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\347\0\347"+
    "\0\u03e9\0\u0436\0\u0483\0\u0483\0\u04d0\0\u051d\0\u056a\0\u01ce"+
    "\0\347\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785"+
    "\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed"+
    "\0\u0a3a\0\347\0\347\0\347\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\347\0\u0a87\0\u0ad4\0\347\0\347\0\u0b21"+
    "\0\u0b6e\0\u0bbb\0\347\0\u0c08\0\u0c55\0\u0ca2\0\347\0\u0cef"+
    "\0\u0d3c\0\u0d89\0\347\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\347"+
    "\0\u0f0a\0\u0f57\0\347\0\347\0\u0fa4\0\347\0\347\0\347"+
    "\0\u0ff1\0\347\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf"+
    "\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427"+
    "\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f"+
    "\0\u16dc\0\u1729\0\u1776\0\u021b\0\u17c3\0\u1810\0\u185d\0\u18aa"+
    "\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12"+
    "\0\u1b5f\0\347\0\u1bac\0\u1bf9\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\347\0\347\0\347\0\u1c46\0\u1c93\0\u1ce0"+
    "\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48"+
    "\0\u1f95\0\347\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163"+
    "\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb"+
    "\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u021b\0\u2599\0\u25e6"+
    "\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801\0\u284e"+
    "\0\u289b\0\u28e8\0\u2935\0\u2982\0\u021b\0\u29cf\0\u2a1c\0\u2a69"+
    "\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u021b\0\u2bea\0\u2c37\0\u2c84"+
    "\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\347"+
    "\0\u1c93\0\347\0\u2eec\0\347\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\347\0\u2f39\0\u1f48\0\347\0\u2f86\0\u2fd3"+
    "\0\u3020\0\u306d\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u021b\0\u31ee"+
    "\0\u323b\0\u3288\0\u32d5\0\u3322\0\u336f\0\u33bc\0\u021b\0\u3409"+
    "\0\u021b\0\u3456\0\u021b\0\u34a3\0\u34f0\0\u353d\0\u358a\0\u021b"+
    "\0\u021b\0\u021b\0\u35d7\0\u021b\0\u3624\0\u021b\0\u3671\0\u36be"+
    "\0\u370b\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u021b"+
    "\0\u3926\0\u3973\0\u39c0\0\u3a0d\0\u3a5a\0\u021b\0\u3aa7\0\u3af4"+
    "\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u021b\0\u3cc2\0\u3d0f"+
    "\0\u3d5c\0\u3da9\0\u021b\0\u021b\0\u3df6\0\u3e43\0\u3e90\0\u3edd"+
    "\0\u021b\0\u021b\0\u3f2a\0\u021b\0\u3f77\0\u3fc4\0\u4011\0\u405e"+
    "\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u021b\0\u021b\0\u41df\0\u422c"+
    "\0\u4279\0\u42c6\0\u4313\0\u4360\0\u021b\0\u43ad\0\u43fa\0\u4447"+
    "\0\u4494\0\u44e1\0\u021b\0\u452e\0\u021b\0\u457b\0\u45c8\0\u021b"+
    "\0\u4615\0\u021b\0\u021b\0\u4662\0\u46af\0\u021b\0\u46fc\0\u4749"+
    "\0\u021b\0\u4796\0\u47e3\0\u021b\0\u4830\0\u487d\0\u48ca\0\u4917"+
    "\0\u021b\0\u4964\0\u49b1\0\u49fe\0\u4a4b\0\u4a98\0\u4ae5\0\u021b"+
    "\0\u4b32\0\u4b7f\0\u4bcc\0\u4c19\0\u021b\0\u4c66\0\u4cb3\0\u4d00"+
    "\0\u021b\0\u021b\0\u021b\0\u4d4d\0\u021b\0\u4d9a\0\u4de7\0\u4e34"+
    "\0\u4e81\0\u4ece\0\u021b\0\u021b\0\u4f1b\0\u4f68\0\u021b\0\u4fb5"+
    "\0\u5002\0\u504f\0\u509c\0\u021b\0\u50e9\0\u5136\0\u5183\0\u51d0"+
    "\0\u521d\0\u021b\0\u526a\0\u021b\0\u52b7\0\u021b\0\u5304\0\u5351"+
    "\0\u539e\0\u53eb\0\u5438\0\u021b\0\u021b\0\u5485\0\u54d2\0\u551f"+
    "\0\347\0\u556c\0\u55b9\0\u5606\0\u5653\0\u021b\0\u56a0\0\u56ed"+
    "\0\u573a\0\u5787\0\u57d4\0\u5821\0\u586e\0\u58bb\0\u5908\0\u5955"+
    "\0\u59a2\0\u59ef\0\u5a3c\0\u5a89\0\u5a89\0\u5ad6\0\u5b23\0\u5b70"+
    "\0\u5bbd\0\u5c0a\0\u5c57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\3\11\3\14\1\11\1\15\1\11\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\10\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\11\1\41\1\42\3\11"+
    "\1\43\1\11\1\44\1\45\2\11\1\46\1\47\1\50"+
    "\1\51\1\11\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\5\14\1\11\1\4\1\6"+
    "\1\4\1\64\1\65\1\66\22\64\1\67\1\64\1\70"+
    "\65\64\1\71\1\72\1\73\23\71\1\4\1\74\65\71"+
    "\117\0\1\6\116\0\1\75\1\76\141\0\1\77\70\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\30\11\12\0"+
    "\6\11\2\0\1\11\6\0\1\100\4\0\3\100\3\0"+
    "\1\100\1\0\1\100\16\0\30\100\17\0\1\100\14\0"+
    "\1\101\1\102\1\103\1\104\1\0\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\24\0\1\112\1\0\1\103\6\0"+
    "\1\113\1\110\1\0\1\104\17\0\1\105\2\107\1\102"+
    "\1\107\1\113\14\0\2\14\1\103\2\0\3\14\1\110"+
    "\1\111\1\112\24\0\1\112\1\0\1\103\6\0\1\113"+
    "\1\110\21\0\5\14\1\113\14\0\2\111\3\0\3\111"+
    "\63\0\5\111\30\0\1\114\5\0\1\77\112\0\1\115"+
    "\1\0\1\116\113\0\1\30\1\116\114\0\1\116\112\0"+
    "\1\117\1\0\1\77\1\0\1\120\47\0\1\121\42\0"+
    "\1\77\3\0\1\122\110\0\1\77\4\0\1\122\63\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\1\11\1\123"+
    "\1\124\25\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\4\11\1\125\2\11"+
    "\1\126\3\11\1\127\14\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\3\11"+
    "\1\130\7\11\1\131\1\132\1\11\1\133\7\11\1\134"+
    "\1\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\4\11\1\135\7\11\1\136"+
    "\13\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\6\11\1\137\21\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\1\140\6\11\1\141\1\142\3\11\1\143"+
    "\13\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\10\11\1\144\1\145\10\11"+
    "\1\146\5\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\7\11\1\147\20\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\1\150\5\11\1\151\7\11\1\152"+
    "\11\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\11\11\1\153\6\11\1\154"+
    "\1\155\6\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\6\11\1\156\1\157"+
    "\20\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\1\160\6\11\1\161\1\162"+
    "\4\11\1\163\12\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\7\11\1\164"+
    "\20\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\1\165\3\11\1\166\11\11"+
    "\1\167\11\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\7\11\1\170\20\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\14\11\1\171\13\11\12\0\6\11"+
    "\2\0\1\11\1\64\2\0\22\64\1\0\1\64\1\0"+
    "\65\64\2\0\1\66\112\0\1\172\2\0\6\172\1\173"+
    "\4\172\2\173\1\174\4\172\1\175\1\176\1\177\13\172"+
    "\1\200\1\172\1\201\1\202\4\172\1\203\6\172\1\204"+
    "\21\172\1\173\2\174\1\172\1\174\1\172\31\0\1\205"+
    "\70\0\1\73\112\0\1\172\2\0\6\172\1\206\4\172"+
    "\2\206\1\207\4\172\1\210\1\211\1\212\13\172\1\213"+
    "\1\172\1\214\1\215\4\172\1\216\6\172\1\217\21\172"+
    "\1\206\2\207\1\172\1\207\1\172\3\0\1\75\1\5"+
    "\1\6\112\75\5\220\1\221\107\220\6\0\2\100\1\0"+
    "\11\100\1\0\1\100\16\0\30\100\12\0\6\100\2\0"+
    "\1\100\11\0\1\101\1\102\1\222\2\0\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\24\0\1\112\1\0\1\222"+
    "\6\0\1\113\1\110\21\0\1\105\2\107\1\102\1\107"+
    "\1\113\14\0\2\102\3\0\3\102\1\110\1\111\1\112"+
    "\24\0\1\112\10\0\1\113\1\110\21\0\5\102\1\113"+
    "\14\0\1\223\1\224\2\0\5\224\1\0\1\224\16\0"+
    "\2\224\3\0\2\224\10\0\2\224\21\0\6\224\14\0"+
    "\1\225\1\102\1\222\2\0\3\225\1\110\1\111\1\112"+
    "\24\0\1\112\1\0\1\222\6\0\1\113\1\110\21\0"+
    "\3\225\1\102\1\225\1\113\14\0\1\107\1\102\1\222"+
    "\2\0\3\107\1\110\1\111\1\112\24\0\1\112\1\0"+
    "\1\222\6\0\1\113\1\110\21\0\3\107\1\102\1\107"+
    "\1\113\14\0\1\226\1\102\1\222\2\0\3\226\1\110"+
    "\1\111\1\112\24\0\1\112\1\0\1\222\6\0\1\113"+
    "\1\110\21\0\3\226\1\102\1\226\1\113\14\0\2\111"+
    "\3\0\3\111\1\110\1\0\1\112\24\0\1\112\10\0"+
    "\1\113\1\110\21\0\5\111\1\113\14\0\2\227\3\0"+
    "\3\227\3\0\1\230\7\0\1\230\47\0\5\227\34\0"+
    "\1\30\1\0\1\77\101\0\1\231\103\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\2\11\1\232\25\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\2\11\1\233\25\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\6\11\1\234\21\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\7\11\1\235"+
    "\20\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\3\11\1\236\24\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\1\237\3\11\1\240\23\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\11\11\1\241\16\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\7\11"+
    "\1\242\20\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\24\11\1\243\3\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\15\11\1\244\12\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\1\245\12\11\1\246\2\11\1\247\11\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\4\11\1\250\10\11\1\251\12\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\3\11\1\252\24\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\2\11\1\253\1\254\24\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\11\11"+
    "\1\255\16\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\1\256\27\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\1\257\27\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\2\11"+
    "\1\260\25\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\16\11\1\261\11\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\3\11\1\262\24\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\11\11\1\263\16\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\3\11"+
    "\1\264\24\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\26\11\1\265\1\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\10\11\1\266\17\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\2\11\1\267\1\270\24\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\24\11\1\271\3\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\20\11\1\272"+
    "\7\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\16\11\1\273\11\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\10\11\1\274\17\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\4\11\1\275\23\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\7\11\1\276"+
    "\20\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\11\11\1\277\16\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\3\11\1\300\24\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\5\11\1\301\22\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\7\11\1\302"+
    "\5\11\1\303\12\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\1\11\1\304"+
    "\26\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\10\11\1\305\4\11\1\306"+
    "\12\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\15\11\1\307\12\11\12\0"+
    "\6\11\2\0\1\11\11\0\1\174\4\0\3\174\63\0"+
    "\3\174\1\0\1\174\15\0\1\310\4\0\3\310\63\0"+
    "\3\310\1\0\1\310\15\0\1\311\4\0\3\311\5\0"+
    "\1\312\55\0\3\311\1\0\1\311\15\0\1\313\4\0"+
    "\3\313\5\0\1\312\55\0\3\313\1\0\1\313\32\0"+
    "\1\314\114\0\1\315\114\0\1\316\114\0\1\317\114\0"+
    "\1\320\114\0\1\321\114\0\1\322\114\0\1\323\66\0"+
    "\5\220\1\324\113\220\1\325\1\324\107\220\11\0\1\223"+
    "\1\224\1\326\1\0\5\224\1\0\1\224\16\0\2\224"+
    "\3\0\2\224\1\0\1\326\6\0\2\224\21\0\6\224"+
    "\14\0\2\327\1\326\1\0\5\327\1\0\1\327\16\0"+
    "\2\327\3\0\2\327\1\0\1\326\6\0\2\327\21\0"+
    "\6\327\14\0\1\330\1\102\1\222\2\0\3\330\1\110"+
    "\1\111\1\112\24\0\1\112\1\0\1\222\6\0\1\113"+
    "\1\110\21\0\3\330\1\102\1\330\1\113\14\0\1\331"+
    "\1\102\1\222\2\0\3\331\1\110\1\111\1\112\24\0"+
    "\1\112\1\0\1\222\6\0\1\113\1\110\21\0\3\331"+
    "\1\102\1\331\1\113\14\0\2\227\3\0\3\227\1\110"+
    "\37\0\1\113\1\110\21\0\5\227\1\113\14\0\2\227"+
    "\3\0\3\227\63\0\5\227\111\0\1\332\15\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\3\11\1\333\24\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\6\11\1\334\21\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\1\335\27\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\10\11\1\336"+
    "\17\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\6\11\1\337\21\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\3\11\1\340\24\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\15\11\1\341\12\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\5\11\1\342"+
    "\22\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\4\11\1\343\23\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\6\11\1\344\21\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\3\11\1\345\24\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\11\11\1\346"+
    "\16\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\6\11\1\347\21\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\7\11\1\350\20\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\2\11\1\351\25\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\16\11\1\352"+
    "\11\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\6\11\1\353\21\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\5\11\1\354\22\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\2\11\1\355\1\356\24\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\2\11"+
    "\1\357\25\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\4\11\1\360\23\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\6\11\1\361\21\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\21\11\1\362\6\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\6\11"+
    "\1\363\21\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\23\11\1\364\4\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\15\11\1\365\12\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\10\11\1\366\17\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\3\11"+
    "\1\367\24\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\6\11\1\370\21\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\7\11\1\371\1\372\17\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\1\373\27\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\1\11"+
    "\1\374\26\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\2\11\1\375\25\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\1\376\27\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\1\377\27\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\7\11\1\u0100\20\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\12\11\1\u0101\15\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\3\11\1\u0102\24\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\25\11"+
    "\1\u0103\2\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\10\11\1\u0104\17\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\1\u0105\27\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\17\11\1\u0106\10\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\10\11\1\u0107"+
    "\17\11\12\0\6\11\2\0\1\11\26\0\1\312\66\0"+
    "\4\220\1\6\1\324\107\220\11\0\2\u0108\1\326\1\0"+
    "\5\u0108\1\0\1\u0108\16\0\2\u0108\3\0\2\u0108\1\0"+
    "\1\326\6\0\2\u0108\21\0\6\u0108\14\0\1\u0109\1\102"+
    "\1\222\2\0\3\u0109\1\110\1\111\1\112\24\0\1\112"+
    "\1\0\1\222\6\0\1\113\1\110\21\0\3\u0109\1\102"+
    "\1\u0109\1\113\14\0\1\u010a\1\102\1\222\2\0\3\u010a"+
    "\1\110\1\111\1\112\24\0\1\112\1\0\1\222\6\0"+
    "\1\113\1\110\21\0\3\u010a\1\102\1\u010a\1\113\111\0"+
    "\1\u010b\14\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\4\11\1\u010c\23\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\4\11\1\u010d"+
    "\23\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\12\11\1\u010e\15\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\6\11\1\u010f\21\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\15\11\1\u0110\12\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\5\11\1\u0111"+
    "\22\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\14\11\1\u0112\13\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\3\11\1\u0113\24\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\4\11\1\u0114\23\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\5\11\1\u0115"+
    "\22\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\2\11\1\u0116\25\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\26\11\1\u0117\1\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\4\11\1\u0118\23\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\14\11\1\u0119"+
    "\13\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\3\11\1\u011a\24\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\15\11\1\u011b\12\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\2\11\1\u011c\25\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\11\11\1\u011d"+
    "\16\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\25\11\1\u011e\2\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\1\u011f\27\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\4\11"+
    "\1\u0120\23\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\4\11\1\u0121\23\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\6\11\1\u0122\21\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\16\11\1\u0123\11\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\10\11"+
    "\1\u0124\17\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\6\11\1\u0125\21\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\3\11\1\u0126\24\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\10\11\1\u0127\17\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\1\u0128"+
    "\27\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\6\11\1\u0129\21\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\1\u012a\27\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\15\11"+
    "\1\u012b\12\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\3\11\1\u012c\24\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\6\11\1\u012d\21\11\12\0\6\11"+
    "\2\0\1\11\11\0\2\u012e\1\326\1\0\5\u012e\1\0"+
    "\1\u012e\16\0\2\u012e\3\0\2\u012e\1\0\1\326\6\0"+
    "\2\u012e\21\0\6\u012e\14\0\1\u012f\1\102\1\222\2\0"+
    "\3\u012f\1\110\1\111\1\112\24\0\1\112\1\0\1\222"+
    "\6\0\1\113\1\110\21\0\3\u012f\1\102\1\u012f\1\113"+
    "\14\0\1\u0130\1\102\1\222\2\0\3\u0130\1\110\1\111"+
    "\1\112\24\0\1\112\1\0\1\222\6\0\1\113\1\110"+
    "\21\0\3\u0130\1\102\1\u0130\1\113\110\0\1\u0131\15\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\1\u0132\27\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\3\11\1\u0133\24\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\1\u0134\27\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\5\11\1\u0135"+
    "\22\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\3\11\1\u0136\24\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\4\11\1\u0137\23\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\14\11\1\u0138\13\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\15\11\1\u0139"+
    "\12\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\2\11\1\u013a\25\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\11\11\1\u013b\16\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\11\11\1\u013c\16\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\17\11\1\u013d"+
    "\10\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\6\11\1\u013e\21\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\11\11\1\u013f\16\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\20\11\1\u0140\7\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\3\11\1\u0141"+
    "\24\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\21\11\1\u0142\6\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\10\11\1\u0143\17\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\6\11\1\u0144\21\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\10\11\1\u0145"+
    "\17\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\23\11\1\u0146\4\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\5\11\1\u0147\22\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\3\11\1\u0148\24\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\5\11\1\u0149"+
    "\22\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\15\11\1\u014a\12\11\12\0"+
    "\6\11\2\0\1\11\11\0\2\u014b\1\326\1\0\5\u014b"+
    "\1\0\1\u014b\16\0\2\u014b\3\0\2\u014b\1\0\1\326"+
    "\6\0\2\u014b\21\0\6\u014b\14\0\1\u014c\1\102\1\222"+
    "\2\0\3\u014c\1\110\1\111\1\112\24\0\1\112\1\0"+
    "\1\222\6\0\1\113\1\110\21\0\3\u014c\1\102\1\u014c"+
    "\1\113\14\0\1\u014d\1\102\1\222\2\0\3\u014d\1\110"+
    "\1\111\1\112\24\0\1\112\1\0\1\222\6\0\1\113"+
    "\1\110\21\0\3\u014d\1\102\1\u014d\1\113\112\0\1\u014e"+
    "\13\0\2\11\1\0\11\11\1\0\1\11\16\0\5\11"+
    "\1\u014f\22\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\11\11\1\u0150\16\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\20\11\1\u0151\7\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\7\11\1\u0152\20\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\6\11"+
    "\1\u0153\21\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\16\11\1\u0154\11\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\2\11\1\u0155\25\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\5\11\1\u0156\22\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\1\u0157"+
    "\27\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\6\11\1\u0158\21\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\3\11\1\u0159\24\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\13\11\1\u015a\14\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\6\11\1\u015b"+
    "\21\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\3\11\1\u015c\24\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\6\11\1\u015d\21\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\10\11\1\u015e\17\11\12\0\6\11\2\0\1\11\11\0"+
    "\2\u015f\1\326\1\0\5\u015f\1\0\1\u015f\16\0\2\u015f"+
    "\3\0\2\u015f\1\0\1\326\6\0\2\u015f\21\0\6\u015f"+
    "\14\0\1\u0160\1\102\1\222\2\0\3\u0160\1\110\1\111"+
    "\1\112\24\0\1\112\1\0\1\222\6\0\1\113\1\110"+
    "\21\0\3\u0160\1\102\1\u0160\1\113\14\0\1\u0161\1\102"+
    "\1\222\2\0\3\u0161\1\110\1\111\1\112\24\0\1\112"+
    "\1\0\1\222\6\0\1\113\1\110\21\0\3\u0161\1\102"+
    "\1\u0161\1\113\21\0\1\u0162\104\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\3\11\1\u0163\24\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\24\11\1\u0164\3\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\11\11"+
    "\1\u0165\16\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\11\11\1\u0166\16\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\6\11\1\u0167\21\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\6\11\1\u0168\21\11\12\0\6\11\2\0\1\11"+
    "\6\0\2\11\1\0\11\11\1\0\1\11\16\0\5\11"+
    "\1\u0169\22\11\12\0\6\11\2\0\1\11\6\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\11\11\1\u016a\16\11"+
    "\12\0\6\11\2\0\1\11\6\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\6\11\1\u016b\21\11\12\0\6\11"+
    "\2\0\1\11\6\0\2\11\1\0\11\11\1\0\1\11"+
    "\16\0\6\11\1\u016c\21\11\12\0\6\11\2\0\1\11"+
    "\11\0\2\u016d\1\326\1\0\5\u016d\1\0\1\u016d\16\0"+
    "\2\u016d\3\0\2\u016d\1\0\1\326\6\0\2\u016d\21\0"+
    "\6\u016d\14\0\1\u016e\1\102\1\222\2\0\3\u016e\1\110"+
    "\1\111\1\112\24\0\1\112\1\0\1\222\6\0\1\113"+
    "\1\110\21\0\3\u016e\1\102\1\u016e\1\113\14\0\1\u016f"+
    "\1\102\1\222\2\0\3\u016f\1\110\1\111\1\112\24\0"+
    "\1\112\1\0\1\222\6\0\1\113\1\110\21\0\3\u016f"+
    "\1\102\1\u016f\1\113\113\0\1\u0170\12\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\15\11\1\u0171\12\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\3\11\1\u0172\24\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\7\11\1\u0173\20\11\12\0\6\11\2\0\1\11\6\0"+
    "\2\11\1\0\11\11\1\0\1\11\16\0\6\11\1\u0174"+
    "\21\11\12\0\6\11\2\0\1\11\6\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\3\11\1\u0175\24\11\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\17\11\1\u0176\10\11\12\0\6\11\2\0"+
    "\1\11\11\0\2\u0177\1\326\1\0\5\u0177\1\0\1\u0177"+
    "\16\0\2\u0177\3\0\2\u0177\1\0\1\326\6\0\2\u0177"+
    "\21\0\6\u0177\14\0\1\u0178\1\102\1\222\2\0\3\u0178"+
    "\1\110\1\111\1\112\24\0\1\112\1\0\1\222\6\0"+
    "\1\113\1\110\21\0\3\u0178\1\102\1\u0178\1\113\14\0"+
    "\1\u0179\1\102\1\222\2\0\3\u0179\1\110\1\111\1\112"+
    "\24\0\1\112\1\0\1\222\6\0\1\113\1\110\21\0"+
    "\3\u0179\1\102\1\u0179\1\113\110\0\1\u017a\15\0\2\11"+
    "\1\0\11\11\1\0\1\11\16\0\27\11\1\u017b\12\0"+
    "\6\11\2\0\1\11\6\0\2\11\1\0\11\11\1\0"+
    "\1\11\16\0\20\11\1\u017c\7\11\12\0\6\11\2\0"+
    "\1\11\6\0\2\11\1\0\11\11\1\0\1\11\16\0"+
    "\2\11\1\u017d\25\11\12\0\6\11\2\0\1\11\11\0"+
    "\2\u017e\1\326\1\0\5\u017e\1\0\1\u017e\16\0\2\u017e"+
    "\3\0\2\u017e\1\0\1\326\6\0\2\u017e\21\0\6\u017e"+
    "\14\0\1\u017f\1\102\1\222\2\0\3\u017f\1\110\1\111"+
    "\1\112\24\0\1\112\1\0\1\222\6\0\1\113\1\110"+
    "\21\0\3\u017f\1\102\1\u017f\1\113\14\0\1\u0180\1\102"+
    "\1\222\2\0\3\u0180\1\110\1\111\1\112\24\0\1\112"+
    "\1\0\1\222\6\0\1\113\1\110\21\0\3\u0180\1\102"+
    "\1\u0180\1\113\112\0\1\u0181\13\0\2\11\1\0\11\11"+
    "\1\0\1\11\16\0\6\11\1\u0182\21\11\12\0\6\11"+
    "\2\0\1\11\11\0\2\u0183\1\326\1\0\5\u0183\1\0"+
    "\1\u0183\16\0\2\u0183\3\0\2\u0183\1\0\1\326\6\0"+
    "\2\u0183\21\0\6\u0183\14\0\1\u0184\1\102\1\222\2\0"+
    "\3\u0184\1\110\1\111\1\112\24\0\1\112\1\0\1\222"+
    "\6\0\1\113\1\110\21\0\3\u0184\1\102\1\u0184\1\113"+
    "\14\0\1\u0185\1\102\1\222\2\0\3\u0185\1\110\1\111"+
    "\1\112\24\0\1\112\1\0\1\222\6\0\1\113\1\110"+
    "\21\0\3\u0185\1\102\1\u0185\1\113\11\0\2\11\1\0"+
    "\11\11\1\0\1\11\16\0\17\11\1\u0186\10\11\12\0"+
    "\6\11\2\0\1\11\11\0\2\u0187\1\326\1\0\5\u0187"+
    "\1\0\1\u0187\16\0\2\u0187\3\0\2\u0187\1\0\1\326"+
    "\6\0\2\u0187\21\0\6\u0187\14\0\1\u0188\1\102\1\222"+
    "\2\0\3\u0188\1\110\1\111\1\112\24\0\1\112\1\0"+
    "\1\222\6\0\1\113\1\110\21\0\3\u0188\1\102\1\u0188"+
    "\1\113\14\0\1\u0189\1\102\1\222\2\0\3\u0189\1\110"+
    "\1\111\1\112\24\0\1\112\1\0\1\222\6\0\1\113"+
    "\1\110\21\0\3\u0189\1\102\1\u0189\1\113\14\0\2\u018a"+
    "\1\326\1\0\5\u018a\1\0\1\u018a\16\0\2\u018a\3\0"+
    "\2\u018a\1\0\1\326\6\0\2\u018a\21\0\6\u018a\14\0"+
    "\1\u018b\1\102\1\222\2\0\3\u018b\1\110\1\111\1\112"+
    "\24\0\1\112\1\0\1\222\6\0\1\113\1\110\21\0"+
    "\3\u018b\1\102\1\u018b\1\113\14\0\1\u018c\1\102\1\222"+
    "\2\0\3\u018c\1\110\1\111\1\112\24\0\1\112\1\0"+
    "\1\222\6\0\1\113\1\110\21\0\3\u018c\1\102\1\u018c"+
    "\1\113\14\0\2\u018d\1\326\1\0\5\u018d\1\0\1\u018d"+
    "\16\0\2\u018d\3\0\2\u018d\1\0\1\326\6\0\2\u018d"+
    "\21\0\6\u018d\14\0\1\u018e\1\102\1\222\2\0\3\u018e"+
    "\1\110\1\111\1\112\24\0\1\112\1\0\1\222\6\0"+
    "\1\113\1\110\21\0\3\u018e\1\102\1\u018e\1\113\14\0"+
    "\1\u018f\1\102\1\222\2\0\3\u018f\1\110\1\111\1\112"+
    "\24\0\1\112\1\0\1\222\6\0\1\113\1\110\21\0"+
    "\3\u018f\1\102\1\u018f\1\113\14\0\2\u0190\1\326\1\0"+
    "\5\u0190\1\0\1\u0190\16\0\2\u0190\3\0\2\u0190\1\0"+
    "\1\326\6\0\2\u0190\21\0\6\u0190\14\0\1\u0191\1\102"+
    "\1\222\2\0\3\u0191\1\110\1\111\1\112\24\0\1\112"+
    "\1\0\1\222\6\0\1\113\1\110\21\0\3\u0191\1\102"+
    "\1\u0191\1\113\14\0\1\u0192\1\102\1\222\2\0\3\u0192"+
    "\1\110\1\111\1\112\24\0\1\112\1\0\1\222\6\0"+
    "\1\113\1\110\21\0\3\u0192\1\102\1\u0192\1\113\14\0"+
    "\2\u0193\1\326\1\0\5\u0193\1\0\1\u0193\16\0\2\u0193"+
    "\3\0\2\u0193\1\0\1\326\6\0\2\u0193\21\0\6\u0193"+
    "\14\0\1\u0194\1\102\1\222\2\0\3\u0194\1\110\1\111"+
    "\1\112\24\0\1\112\1\0\1\222\6\0\1\113\1\110"+
    "\21\0\3\u0194\1\102\1\u0194\1\113\14\0\1\u0195\1\102"+
    "\1\222\2\0\3\u0195\1\110\1\111\1\112\24\0\1\112"+
    "\1\0\1\222\6\0\1\113\1\110\21\0\3\u0195\1\102"+
    "\1\u0195\1\113\14\0\2\u0196\1\326\1\0\5\u0196\1\0"+
    "\1\u0196\16\0\2\u0196\3\0\2\u0196\1\0\1\326\6\0"+
    "\2\u0196\21\0\6\u0196\14\0\1\u0197\1\102\1\222\2\0"+
    "\3\u0197\1\110\1\111\1\112\24\0\1\112\1\0\1\222"+
    "\6\0\1\113\1\110\21\0\3\u0197\1\102\1\u0197\1\113"+
    "\16\0\1\326\36\0\1\326\53\0\1\u0198\1\102\1\222"+
    "\2\0\3\u0198\1\110\1\111\1\112\24\0\1\112\1\0"+
    "\1\222\6\0\1\113\1\110\21\0\3\u0198\1\102\1\u0198"+
    "\1\113\14\0\1\u0199\1\102\1\222\2\0\3\u0199\1\110"+
    "\1\111\1\112\24\0\1\112\1\0\1\222\6\0\1\113"+
    "\1\110\21\0\3\u0199\1\102\1\u0199\1\113\14\0\1\u019a"+
    "\1\102\1\222\2\0\3\u019a\1\110\1\111\1\112\24\0"+
    "\1\112\1\0\1\222\6\0\1\113\1\110\21\0\3\u019a"+
    "\1\102\1\u019a\1\113\14\0\1\u019b\1\102\1\222\2\0"+
    "\3\u019b\1\110\1\111\1\112\24\0\1\112\1\0\1\222"+
    "\6\0\1\113\1\110\21\0\3\u019b\1\102\1\u019b\1\113"+
    "\14\0\2\102\1\222\2\0\3\102\1\110\1\111\1\112"+
    "\24\0\1\112\1\0\1\222\6\0\1\113\1\110\21\0"+
    "\5\102\1\113\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\10\1\2\11\10\1\1\11"+
    "\20\1\12\11\2\1\2\11\3\1\1\11\1\1\2\0"+
    "\1\11\3\1\1\11\1\0\3\1\1\11\1\1\1\0"+
    "\2\11\1\1\3\11\1\0\1\11\47\1\1\11\2\1"+
    "\11\11\12\1\2\0\1\11\5\1\2\0\56\1\1\11"+
    "\1\0\1\11\1\0\10\11\1\0\1\1\1\11\3\1"+
    "\1\0\60\1\1\0\45\1\1\0\34\1\1\0\23\1"+
    "\1\0\15\1\1\0\11\1\1\0\3\1\1\0\2\1"+
    "\1\11\1\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Token token(TokenType type) {
        return new Token(type, yyline+1, yycolumn+1);
    }
    
    private Token token(TokenType type, Object value) {
        return new Token(type, yyline+1, yycolumn+1, value);
    }
    
    private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 112: break;
        case 2: 
          { /* ignore */
          }
        case 113: break;
        case 3: 
          { return token(TokenType.OP_ARITMETICO);
          }
        case 114: break;
        case 4: 
          { return token(TokenType.ID);
          }
        case 115: break;
        case 5: 
          { return token(TokenType.INTEGER_LITERAL, new Integer(yytext()));
          }
        case 116: break;
        case 6: 
          { return token(TokenType.PONTO);
          }
        case 117: break;
        case 7: 
          { string.setLength(0); yybegin(STRING);
          }
        case 118: break;
        case 8: 
          { yybegin(CHARLITERAL);
          }
        case 119: break;
        case 9: 
          { return token(TokenType.OP_RELACIONAL);
          }
        case 120: break;
        case 10: 
          { return token(TokenType.OP_LOGICO);
          }
        case 121: break;
        case 11: 
          { return token(TokenType.OP_BITWISE);
          }
        case 122: break;
        case 12: 
          { return token(TokenType.PAREN_ESQ);
          }
        case 123: break;
        case 13: 
          { return token(TokenType.PAREN_DIR);
          }
        case 124: break;
        case 14: 
          { return token(TokenType.CHAVE_ESQ);
          }
        case 125: break;
        case 15: 
          { return token(TokenType.CHAVE_DIR);
          }
        case 126: break;
        case 16: 
          { return token(TokenType.COLCH_ESQ);
          }
        case 127: break;
        case 17: 
          { return token(TokenType.COLCH_DIR);
          }
        case 128: break;
        case 18: 
          { return token(TokenType.PONTO_VIRGULA);
          }
        case 129: break;
        case 19: 
          { return token(TokenType.VIRGULA);
          }
        case 130: break;
        case 20: 
          { return token(TokenType.INTERROG);
          }
        case 131: break;
        case 21: 
          { return token(TokenType.DOIS_PONTOS);
          }
        case 132: break;
        case 22: 
          { string.append( yytext() );
          }
        case 133: break;
        case 23: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 134: break;
        case 24: 
          { yybegin(YYINITIAL); return token(TokenType.STRING_LITERAL, string.toString());
          }
        case 135: break;
        case 25: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 136: break;
        case 26: 
          { return token(TokenType.ANNOTATION);
          }
        case 137: break;
        case 27: 
          { return token(TokenType.INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
          }
        case 138: break;
        case 28: 
          { return token(TokenType.FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 139: break;
        case 29: 
          { return token(TokenType.INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 140: break;
        case 30: 
          { return token(TokenType.FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
          }
        case 141: break;
        case 31: 
          { return token(TokenType.FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 142: break;
        case 32: 
          { return token(TokenType.INCREMENTO);
          }
        case 143: break;
        case 33: 
          { return token(TokenType.LAMBDA);
          }
        case 144: break;
        case 34: 
          { return token(TokenType.DECREMENTO);
          }
        case 145: break;
        case 35: 
          { return token(TokenType.IF);
          }
        case 146: break;
        case 36: 
          { return token(TokenType.DO);
          }
        case 147: break;
        case 37: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 148: break;
        case 38: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                           string.append( val );
          }
        case 149: break;
        case 39: 
          { string.append( '\"' );
          }
        case 150: break;
        case 40: 
          { string.append( '\'' );
          }
        case 151: break;
        case 41: 
          { string.append( '\\' );
          }
        case 152: break;
        case 42: 
          { string.append( '\b' );
          }
        case 153: break;
        case 43: 
          { string.append( '\t' );
          }
        case 154: break;
        case 44: 
          { string.append( '\r' );
          }
        case 155: break;
        case 45: 
          { string.append( '\n' );
          }
        case 156: break;
        case 46: 
          { string.append( '\f' );
          }
        case 157: break;
        case 47: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, yytext().charAt(0));
          }
        case 158: break;
        case 48: 
          { return token(TokenType.INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
          }
        case 159: break;
        case 49: 
          { return token(TokenType.INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
          }
        case 160: break;
        case 50: 
          { return token(TokenType.TRY);
          }
        case 161: break;
        case 51: 
          { return token(TokenType.NEW);
          }
        case 162: break;
        case 52: 
          { return token(TokenType.INT);
          }
        case 163: break;
        case 53: 
          { return token(TokenType.FOR);
          }
        case 164: break;
        case 54: 
          { yybegin(YYINITIAL); 
                                          int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                        return token(TokenType.CHARACTER_LITERAL, (char)val);
          }
        case 165: break;
        case 55: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\"');
          }
        case 166: break;
        case 56: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\'');
          }
        case 167: break;
        case 57: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\\');
          }
        case 168: break;
        case 58: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\b');
          }
        case 169: break;
        case 59: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\t');
          }
        case 170: break;
        case 60: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\r');
          }
        case 171: break;
        case 61: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\n');
          }
        case 172: break;
        case 62: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\f');
          }
        case 173: break;
        case 63: 
          { return token(TokenType.INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
          }
        case 174: break;
        case 64: 
          { return token(TokenType.BYTE);
          }
        case 175: break;
        case 65: 
          { return token(TokenType.BOOLEAN_LITERAL, true);
          }
        case 176: break;
        case 66: 
          { return token(TokenType.THIS);
          }
        case 177: break;
        case 67: 
          { return token(TokenType.CASE);
          }
        case 178: break;
        case 68: 
          { return token(TokenType.CHAR);
          }
        case 179: break;
        case 69: 
          { return token(TokenType.ELSE);
          }
        case 180: break;
        case 70: 
          { return token(TokenType.ENUM);
          }
        case 181: break;
        case 71: 
          { return token(TokenType.LONG);
          }
        case 182: break;
        case 72: 
          { return token(TokenType.NULL_LITERAL);
          }
        case 183: break;
        case 73: 
          { return token(TokenType.GOTO);
          }
        case 184: break;
        case 74: 
          { return token(TokenType.VOID);
          }
        case 185: break;
        case 75: 
          { return token(TokenType.BREAK);
          }
        case 186: break;
        case 76: 
          { return token(TokenType.SHORT);
          }
        case 187: break;
        case 77: 
          { return token(TokenType.SUPER);
          }
        case 188: break;
        case 78: 
          { return token(TokenType.THROW);
          }
        case 189: break;
        case 79: 
          { return token(TokenType.CATCH);
          }
        case 190: break;
        case 80: 
          { return token(TokenType.CONST);
          }
        case 191: break;
        case 81: 
          { return token(TokenType.CLASS);
          }
        case 192: break;
        case 82: 
          { return token(TokenType.BOOLEAN_LITERAL, false);
          }
        case 193: break;
        case 83: 
          { return token(TokenType.FLOAT);
          }
        case 194: break;
        case 84: 
          { return token(TokenType.FINAL);
          }
        case 195: break;
        case 85: 
          { return token(TokenType.WHILE);
          }
        case 196: break;
        case 86: 
          { return token(TokenType.ASSERT);
          }
        case 197: break;
        case 87: 
          { return token(TokenType.STATIC);
          }
        case 198: break;
        case 88: 
          { return token(TokenType.SWITCH);
          }
        case 199: break;
        case 89: 
          { return token(TokenType.THROWS);
          }
        case 200: break;
        case 90: 
          { return token(TokenType.RETURN);
          }
        case 201: break;
        case 91: 
          { return token(TokenType.NATIVE);
          }
        case 202: break;
        case 92: 
          { return token(TokenType.IMPORT);
          }
        case 203: break;
        case 93: 
          { return token(TokenType.DOUBLE);
          }
        case 204: break;
        case 94: 
          { return token(TokenType.PUBLIC);
          }
        case 205: break;
        case 95: 
          { return token(TokenType.BOOLEAN);
          }
        case 206: break;
        case 96: 
          { return token(TokenType.EXTENDS);
          }
        case 207: break;
        case 97: 
          { return token(TokenType.DEFAULT);
          }
        case 208: break;
        case 98: 
          { return token(TokenType.FINALLY);
          }
        case 209: break;
        case 99: 
          { return token(TokenType.PACKAGE);
          }
        case 210: break;
        case 100: 
          { return token(TokenType.PRIVATE);
          }
        case 211: break;
        case 101: 
          { return token(TokenType.ABSTRACT);
          }
        case 212: break;
        case 102: 
          { return token(TokenType.STRICTFP);
          }
        case 213: break;
        case 103: 
          { return token(TokenType.CONTINUE);
          }
        case 214: break;
        case 104: 
          { return token(TokenType.VOLATILE);
          }
        case 215: break;
        case 105: 
          { return token(TokenType.TRANSIENT);
          }
        case 216: break;
        case 106: 
          { return token(TokenType.INTERFACE);
          }
        case 217: break;
        case 107: 
          { return token(TokenType.PROTECTED);
          }
        case 218: break;
        case 108: 
          { return token(TokenType.INSTANCEOF);
          }
        case 219: break;
        case 109: 
          { return token(TokenType.IMPLEMENTS);
          }
        case 220: break;
        case 110: 
          { return token(TokenType.INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 221: break;
        case 111: 
          { return token(TokenType.SYNCHRONIZED);
          }
        case 222: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return token(TokenType.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
