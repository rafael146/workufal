/* The following code was generated by JFlex 1.5.1 */

package analisador.lexico;

import analisador.lexico.Token.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>src/analisador/lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\111\1\112\1\1\16\7\4\0\1\3\1\72"+
    "\1\24\1\0\1\6\1\102\1\76\1\25\1\57\1\60\1\5\1\100"+
    "\1\66\1\23\1\21\1\4\1\10\1\16\1\103\1\15\1\104\1\17"+
    "\1\107\1\105\1\106\1\11\1\75\1\65\1\71\1\67\1\70\1\74"+
    "\1\0\3\14\1\110\1\22\1\20\5\6\1\12\13\6\1\13\2\6"+
    "\1\63\1\26\1\64\1\101\1\6\1\0\1\27\1\30\1\34\1\46"+
    "\1\35\1\47\1\52\1\43\1\44\1\6\1\41\1\37\1\50\1\40"+
    "\1\36\1\53\1\6\1\33\1\31\1\32\1\45\1\54\1\55\1\51"+
    "\1\42\1\56\1\61\1\77\1\62\1\73\6\7\1\113\32\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6"+
    "\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7"+
    "\6\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6"+
    "\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6"+
    "\5\7\22\0\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7"+
    "\1\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7"+
    "\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0"+
    "\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0"+
    "\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7"+
    "\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7"+
    "\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0"+
    "\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0"+
    "\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6"+
    "\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0"+
    "\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7"+
    "\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6"+
    "\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7"+
    "\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7"+
    "\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6"+
    "\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\30\0\1\111\1\111\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6\7\0"+
    "\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0"+
    "\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7"+
    "\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7\34\6"+
    "\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7"+
    "\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7\10\6"+
    "\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0\60\6"+
    "\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6"+
    "\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6"+
    "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6"+
    "\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0"+
    "\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0"+
    "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\20\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\40\1\41\2\1\2\42\1\1\2\0\1\43"+
    "\1\44\1\45\1\6\1\46\1\0\3\45\1\47\1\6"+
    "\1\0\1\50\1\51\1\52\1\0\31\5\1\53\2\5"+
    "\1\54\12\5\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\2\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\12\73\2\0\1\106\2\107\2\45"+
    "\1\6\2\0\14\5\1\110\16\5\1\111\2\5\1\112"+
    "\4\5\1\113\12\5\1\114\1\115\1\116\1\74\1\0"+
    "\1\117\1\0\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\0\1\2\1\130\1\107\2\45\1\0"+
    "\4\5\1\131\7\5\1\132\1\5\1\133\1\5\1\134"+
    "\4\5\1\135\1\136\1\137\1\5\1\140\1\5\1\141"+
    "\11\5\1\142\5\5\1\143\1\5\1\144\1\107\2\45"+
    "\1\0\2\5\1\145\4\5\1\146\1\147\2\5\1\150"+
    "\1\5\1\151\1\152\1\5\1\153\10\5\1\154\1\155"+
    "\1\156\5\5\1\157\1\107\2\45\1\0\1\5\1\160"+
    "\1\5\1\161\2\5\1\162\1\5\1\163\1\164\2\5"+
    "\1\165\2\5\1\166\2\5\1\167\4\5\1\170\1\5"+
    "\1\107\2\45\1\0\1\5\1\171\4\5\1\172\3\5"+
    "\1\173\1\174\1\175\1\5\1\176\1\5\1\107\2\45"+
    "\1\0\1\177\1\200\2\5\1\201\4\5\1\202\1\107"+
    "\2\45\1\0\1\5\1\203\1\5\1\204\1\5\1\205"+
    "\1\107\2\45\1\0\1\5\1\206\1\207\1\0\2\45"+
    "\1\210\1\5\1\0\2\45\1\211\1\0\2\45\1\0"+
    "\2\45\1\0\2\45\1\0\2\45\1\0\1\45\1\6"+
    "\1\0\5\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\344\0\u017c\0\u01c8"+
    "\0\u0214\0\u0260\0\u02ac\0\u02f8\0\u0344\0\344\0\344\0\u0390"+
    "\0\u03dc\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0"+
    "\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\344"+
    "\0\344\0\344\0\344\0\344\0\344\0\344\0\344\0\u0850"+
    "\0\u089c\0\u08e8\0\u0934\0\344\0\344\0\344\0\u0980\0\u09cc"+
    "\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\344\0\344\0\u0b94"+
    "\0\u0be0\0\u0c2c\0\344\0\u0c78\0\u0cc4\0\u0d10\0\344\0\344"+
    "\0\u0d5c\0\u0da8\0\344\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\344"+
    "\0\u0f24\0\u0f70\0\344\0\344\0\344\0\u0fbc\0\u1008\0\u1054"+
    "\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4"+
    "\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514"+
    "\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728\0\u0214"+
    "\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988"+
    "\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\344\0\344\0\u1b50"+
    "\0\344\0\u1b9c\0\344\0\344\0\344\0\344\0\344\0\344"+
    "\0\344\0\344\0\344\0\344\0\u1be8\0\u1c34\0\344\0\344"+
    "\0\344\0\344\0\344\0\344\0\344\0\344\0\344\0\u1c80"+
    "\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0"+
    "\0\u1f2c\0\u1f78\0\u1fc4\0\344\0\u2010\0\u205c\0\u20a8\0\u20f4"+
    "\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354"+
    "\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u0214"+
    "\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8"+
    "\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u0214\0\u29dc"+
    "\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u0214\0\u2bf0"+
    "\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50"+
    "\0\u2e9c\0\344\0\u2ee8\0\344\0\344\0\u1ccc\0\344\0\u2f34"+
    "\0\344\0\344\0\344\0\344\0\344\0\344\0\344\0\344"+
    "\0\u2f80\0\u1f78\0\344\0\u2fcc\0\u3018\0\u3064\0\u30b0\0\u30fc"+
    "\0\u3148\0\u3194\0\u31e0\0\u0214\0\u322c\0\u3278\0\u32c4\0\u3310"+
    "\0\u335c\0\u33a8\0\u33f4\0\u0214\0\u3440\0\u0214\0\u348c\0\u0214"+
    "\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u0214\0\u0214\0\u0214\0\u3608"+
    "\0\u0214\0\u3654\0\u0214\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0"+
    "\0\u381c\0\u3868\0\u38b4\0\u3900\0\u0214\0\u394c\0\u3998\0\u39e4"+
    "\0\u3a30\0\u3a7c\0\u0214\0\u3ac8\0\344\0\u3b14\0\u3b60\0\u3bac"+
    "\0\u3bf8\0\u3c44\0\u3c90\0\u0214\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0"+
    "\0\u0214\0\u0214\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0\0\u0214\0\u0214"+
    "\0\u3f3c\0\u0214\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u4104"+
    "\0\u4150\0\u419c\0\u0214\0\u0214\0\u41e8\0\u4234\0\u4280\0\u42cc"+
    "\0\u4318\0\u4364\0\u0214\0\u43b0\0\u43fc\0\u4448\0\u4494\0\u44e0"+
    "\0\u0214\0\u452c\0\u0214\0\u4578\0\u45c4\0\u0214\0\u4610\0\u0214"+
    "\0\u0214\0\u465c\0\u46a8\0\u0214\0\u46f4\0\u4740\0\u0214\0\u478c"+
    "\0\u47d8\0\u0214\0\u4824\0\u4870\0\u48bc\0\u4908\0\u0214\0\u4954"+
    "\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u0214\0\u4b1c\0\u4b68"+
    "\0\u4bb4\0\u4c00\0\u0214\0\u4c4c\0\u4c98\0\u4ce4\0\u0214\0\u0214"+
    "\0\u0214\0\u4d30\0\u0214\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u4eac"+
    "\0\u0214\0\u0214\0\u4ef8\0\u4f44\0\u0214\0\u4f90\0\u4fdc\0\u5028"+
    "\0\u5074\0\u0214\0\u50c0\0\u510c\0\u5158\0\u51a4\0\u51f0\0\u0214"+
    "\0\u523c\0\u0214\0\u5288\0\u0214\0\u52d4\0\u5320\0\u536c\0\u53b8"+
    "\0\u5404\0\u0214\0\u0214\0\u5450\0\u549c\0\u54e8\0\344\0\u5534"+
    "\0\u5580\0\u55cc\0\u5618\0\u0214\0\u5664\0\u56b0\0\u56fc\0\u5748"+
    "\0\u5794\0\u57e0\0\u582c\0\u5878\0\u58c4\0\u5910\0\u595c\0\u59a8"+
    "\0\u59f4\0\u5a40\0\u5a40\0\u5a8c\0\u5ad8\0\u5b24\0\u5b70\0\u5bbc"+
    "\0\u5c08";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\11\1\27\1\30\3\11\1\31\1\11\1\32"+
    "\1\33\2\11\1\34\1\35\1\36\1\37\1\11\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\5\13\1\11\1\4\1\6\1\4"+
    "\1\64\1\65\1\66\21\64\1\67\1\64\1\70\65\64"+
    "\1\71\1\72\1\73\22\71\1\4\1\74\65\71\116\0"+
    "\1\6\115\0\1\75\1\76\61\0\1\77\113\0\1\100"+
    "\32\0\13\11\1\0\1\11\4\0\30\11\24\0\6\11"+
    "\2\0\1\11\10\0\1\101\1\102\1\103\1\104\1\0"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\12\0\1\112"+
    "\1\0\1\103\6\0\1\113\1\110\1\0\1\104\31\0"+
    "\1\105\2\107\1\102\1\107\1\113\13\0\2\13\1\103"+
    "\2\0\3\13\1\110\1\111\1\112\12\0\1\112\1\0"+
    "\1\103\6\0\1\113\1\110\33\0\5\13\1\113\13\0"+
    "\2\111\3\0\3\111\63\0\5\111\27\0\1\114\43\0"+
    "\1\115\13\0\1\116\16\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\117\1\120\25\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\121\2\11"+
    "\1\122\3\11\1\123\14\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\124\7\11"+
    "\1\125\1\126\1\11\1\127\7\11\1\130\1\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\131\7\11\1\132\13\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\133"+
    "\21\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\134\6\11\1\135\1\136\3\11\1\137"+
    "\13\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\140\1\141\10\11\1\142\5\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\143\20\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\144\5\11\1\145"+
    "\7\11\1\146\11\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\147\6\11\1\150"+
    "\1\151\6\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\152\1\153\20\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\154\6\11\1\155\1\156\4\11\1\157\12\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\160\20\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\161\3\11\1\162\11\11"+
    "\1\163\11\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\164\20\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\165\13\11\24\0\6\11\2\0\1\11\67\0\1\166"+
    "\113\0\1\167\1\170\112\0\1\171\1\0\1\172\111\0"+
    "\1\173\113\0\1\174\6\0\1\175\104\0\1\176\7\0"+
    "\1\177\103\0\1\200\10\0\1\201\102\0\1\202\113\0"+
    "\1\203\24\0\1\64\2\0\21\64\1\0\1\64\1\0"+
    "\65\64\2\0\1\66\111\0\1\204\2\0\5\204\1\205"+
    "\4\204\2\205\1\206\4\204\1\207\1\210\1\211\1\204"+
    "\1\212\1\204\1\213\1\214\4\204\1\215\6\204\1\216"+
    "\33\204\1\205\2\206\1\204\1\206\1\204\30\0\1\217"+
    "\70\0\1\73\111\0\1\204\2\0\5\204\1\220\4\204"+
    "\2\220\1\221\4\204\1\222\1\223\1\224\1\204\1\225"+
    "\1\204\1\226\1\227\4\204\1\230\6\204\1\231\33\204"+
    "\1\220\2\221\1\204\1\221\1\204\3\0\1\75\1\5"+
    "\1\6\111\75\5\232\1\233\106\232\10\0\1\101\1\102"+
    "\1\234\2\0\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\12\0\1\112\1\0\1\234\6\0\1\113\1\110\33\0"+
    "\1\105\2\107\1\102\1\107\1\113\13\0\2\102\3\0"+
    "\3\102\1\110\1\111\1\112\12\0\1\112\10\0\1\113"+
    "\1\110\33\0\5\102\1\113\13\0\1\235\1\236\2\0"+
    "\5\236\1\0\1\236\4\0\2\236\3\0\2\236\10\0"+
    "\2\236\33\0\6\236\13\0\1\237\1\102\1\234\2\0"+
    "\3\237\1\110\1\111\1\112\12\0\1\112\1\0\1\234"+
    "\6\0\1\113\1\110\33\0\3\237\1\102\1\237\1\113"+
    "\13\0\1\107\1\102\1\234\2\0\3\107\1\110\1\111"+
    "\1\112\12\0\1\112\1\0\1\234\6\0\1\113\1\110"+
    "\33\0\3\107\1\102\1\107\1\113\13\0\1\240\1\102"+
    "\1\234\2\0\3\240\1\110\1\111\1\112\12\0\1\112"+
    "\1\0\1\234\6\0\1\113\1\110\33\0\3\240\1\102"+
    "\1\240\1\113\13\0\2\111\3\0\3\111\1\110\1\0"+
    "\1\112\12\0\1\112\10\0\1\113\1\110\33\0\5\111"+
    "\1\113\13\0\2\241\3\0\3\241\3\0\1\242\54\0"+
    "\1\242\2\0\5\241\22\0\1\243\103\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\244\25\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\245"+
    "\25\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\246\21\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\247"+
    "\20\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\250\24\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\251\3\11"+
    "\1\252\23\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\253\16\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\254\20\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\24\11\1\255\3\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\256\12\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\257\12\11\1\260\2\11\1\261"+
    "\11\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\262\10\11\1\263\12\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\264\24\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\265\1\266\24\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\267\16\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\270\27\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\271\27\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\272\25\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\16\11"+
    "\1\273\11\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\274\24\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\275\16\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\276\24\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\26\11"+
    "\1\277\1\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\300\17\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\301\1\302\24\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\24\11\1\303\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\304\7\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\305\11\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\306\17\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\307\23\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\310\20\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\311\16\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\312\24\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\313\22\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\314\5\11\1\315\12\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\316"+
    "\26\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\317\4\11\1\320\12\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\321\12\11\24\0\6\11\2\0\1\11\67\0"+
    "\1\322\1\323\112\0\1\324\34\0\1\206\4\0\3\206"+
    "\63\0\3\206\1\0\1\206\14\0\1\325\4\0\3\325"+
    "\63\0\3\325\1\0\1\325\14\0\1\326\4\0\3\326"+
    "\5\0\1\327\55\0\3\326\1\0\1\326\14\0\1\330"+
    "\4\0\3\330\5\0\1\327\55\0\3\330\1\0\1\330"+
    "\31\0\1\331\113\0\1\332\113\0\1\333\113\0\1\334"+
    "\113\0\1\335\113\0\1\336\113\0\1\337\113\0\1\340"+
    "\66\0\5\232\1\341\112\232\1\342\1\341\106\232\10\0"+
    "\1\235\1\236\1\343\1\0\5\236\1\0\1\236\4\0"+
    "\2\236\3\0\2\236\1\0\1\343\6\0\2\236\33\0"+
    "\6\236\13\0\2\344\1\343\1\0\5\344\1\0\1\344"+
    "\4\0\2\344\3\0\2\344\1\0\1\343\6\0\2\344"+
    "\33\0\6\344\13\0\1\345\1\102\1\234\2\0\3\345"+
    "\1\110\1\111\1\112\12\0\1\112\1\0\1\234\6\0"+
    "\1\113\1\110\33\0\3\345\1\102\1\345\1\113\13\0"+
    "\1\346\1\102\1\234\2\0\3\346\1\110\1\111\1\112"+
    "\12\0\1\112\1\0\1\234\6\0\1\113\1\110\33\0"+
    "\3\346\1\102\1\346\1\113\13\0\2\241\3\0\3\241"+
    "\1\110\25\0\1\113\1\110\33\0\5\241\1\113\13\0"+
    "\2\241\3\0\3\241\63\0\5\241\110\0\1\347\15\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\350\24\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\351\21\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\352\27\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\353\17\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\354\21\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\355\24\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\356\12\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\357\22\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\360\23\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\361\21\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\362\24\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\363\16\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\364\21\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\365\20\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\366\25\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\16\11"+
    "\1\367\11\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\370\21\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\371\22\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\372\1\373\24\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\374\25\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\375\23\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\376\21\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\377\6\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\u0100\21\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\u0101\4\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u0102\12\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0103\17\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u0104\24\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u0105\21\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\u0106\1\u0107\17\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u0108\27\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\u0109\26\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u010a\25\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u010b\27\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\u010c\27\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u010d"+
    "\20\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u010e\15\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u010f"+
    "\24\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\25\11\1\u0110\2\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0111"+
    "\17\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u0112\27\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\17\11\1\u0113\10\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u0114\17\11\24\0\6\11\2\0\1\11"+
    "\67\0\1\u0115\51\0\1\327\66\0\4\232\1\6\1\341"+
    "\106\232\10\0\2\u0116\1\343\1\0\5\u0116\1\0\1\u0116"+
    "\4\0\2\u0116\3\0\2\u0116\1\0\1\343\6\0\2\u0116"+
    "\33\0\6\u0116\13\0\1\u0117\1\102\1\234\2\0\3\u0117"+
    "\1\110\1\111\1\112\12\0\1\112\1\0\1\234\6\0"+
    "\1\113\1\110\33\0\3\u0117\1\102\1\u0117\1\113\13\0"+
    "\1\u0118\1\102\1\234\2\0\3\u0118\1\110\1\111\1\112"+
    "\12\0\1\112\1\0\1\234\6\0\1\113\1\110\33\0"+
    "\3\u0118\1\102\1\u0118\1\113\110\0\1\u0119\14\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u011a\23\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\u011b\23\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\u011c\15\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\u011d\21\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u011e\12\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u011f\22\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\u0120\13\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u0121\24\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u0122\23\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u0123\22\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u0124\25\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\26\11"+
    "\1\u0125\1\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u0126\23\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\u0127\13\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u0128\24\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u0129\12\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u012a\25\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\u012b\16\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\25\11\1\u012c\2\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u012d"+
    "\27\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\u012e\23\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u012f"+
    "\23\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\u0130\21\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0131"+
    "\11\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0132\17\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\u0133"+
    "\21\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0134\24\11\24\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0135"+
    "\17\11\24\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u0136\27\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\u0137\21\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u0138\27\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u0139\12\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u013a\24\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u013b\21\11\24\0"+
    "\6\11\2\0\1\11\10\0\2\u013c\1\343\1\0\5\u013c"+
    "\1\0\1\u013c\4\0\2\u013c\3\0\2\u013c\1\0\1\343"+
    "\6\0\2\u013c\33\0\6\u013c\13\0\1\u013d\1\102\1\234"+
    "\2\0\3\u013d\1\110\1\111\1\112\12\0\1\112\1\0"+
    "\1\234\6\0\1\113\1\110\33\0\3\u013d\1\102\1\u013d"+
    "\1\113\13\0\1\u013e\1\102\1\234\2\0\3\u013e\1\110"+
    "\1\111\1\112\12\0\1\112\1\0\1\234\6\0\1\113"+
    "\1\110\33\0\3\u013e\1\102\1\u013e\1\113\107\0\1\u013f"+
    "\15\0\13\11\1\0\1\11\4\0\1\u0140\27\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u0141\24\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u0142\27\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u0143\22\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u0144\24\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\u0145\23\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\u0146\13\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\u0147\12\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\u0148\25\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\u0149\16\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u014a\16\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\17\11"+
    "\1\u014b\10\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\u014c\21\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\u014d\16\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\20\11\1\u014e\7\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u014f\24\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\21\11\1\u0150\6\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0151\17\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\u0152\21\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0153\17\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\23\11\1\u0154\4\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u0155\22\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u0156\24\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u0157\22\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\u0158\12\11\24\0\6\11"+
    "\2\0\1\11\10\0\2\u0159\1\343\1\0\5\u0159\1\0"+
    "\1\u0159\4\0\2\u0159\3\0\2\u0159\1\0\1\343\6\0"+
    "\2\u0159\33\0\6\u0159\13\0\1\u015a\1\102\1\234\2\0"+
    "\3\u015a\1\110\1\111\1\112\12\0\1\112\1\0\1\234"+
    "\6\0\1\113\1\110\33\0\3\u015a\1\102\1\u015a\1\113"+
    "\13\0\1\u015b\1\102\1\234\2\0\3\u015b\1\110\1\111"+
    "\1\112\12\0\1\112\1\0\1\234\6\0\1\113\1\110"+
    "\33\0\3\u015b\1\102\1\u015b\1\113\111\0\1\u015c\13\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u015d\22\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u015e\16\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\u015f\7\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\u0160\20\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u0161\21\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u0162\11\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u0163\25\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0164\22\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\u0165\27\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\u0166\21\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u0167\24\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\13\11"+
    "\1\u0168\14\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\u0169\21\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u016a\24\11\24\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\u016b\21\11\24\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u016c\17\11\24\0\6\11\2\0\1\11\10\0\2\u016d"+
    "\1\343\1\0\5\u016d\1\0\1\u016d\4\0\2\u016d\3\0"+
    "\2\u016d\1\0\1\343\6\0\2\u016d\33\0\6\u016d\13\0"+
    "\1\u016e\1\102\1\234\2\0\3\u016e\1\110\1\111\1\112"+
    "\12\0\1\112\1\0\1\234\6\0\1\113\1\110\33\0"+
    "\3\u016e\1\102\1\u016e\1\113\13\0\1\u016f\1\102\1\234"+
    "\2\0\3\u016f\1\110\1\111\1\112\12\0\1\112\1\0"+
    "\1\234\6\0\1\113\1\110\33\0\3\u016f\1\102\1\u016f"+
    "\1\113\20\0\1\u0170\104\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u0171\24\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\24\11\1\u0172\3\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0173\16\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0174\16\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\u0175\21\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u0176\21\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0177\22\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0178\16\11\24\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\u0179\21\11\24\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u017a\21\11\24\0"+
    "\6\11\2\0\1\11\10\0\2\u017b\1\343\1\0\5\u017b"+
    "\1\0\1\u017b\4\0\2\u017b\3\0\2\u017b\1\0\1\343"+
    "\6\0\2\u017b\33\0\6\u017b\13\0\1\u017c\1\102\1\234"+
    "\2\0\3\u017c\1\110\1\111\1\112\12\0\1\112\1\0"+
    "\1\234\6\0\1\113\1\110\33\0\3\u017c\1\102\1\u017c"+
    "\1\113\13\0\1\u017d\1\102\1\234\2\0\3\u017d\1\110"+
    "\1\111\1\112\12\0\1\112\1\0\1\234\6\0\1\113"+
    "\1\110\33\0\3\u017d\1\102\1\u017d\1\113\112\0\1\u017e"+
    "\12\0\13\11\1\0\1\11\4\0\15\11\1\u017f\12\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0180\24\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\u0181\20\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\u0182\21\11\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u0183\24\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\17\11\1\u0184\10\11\24\0\6\11\2\0\1\11"+
    "\10\0\2\u0185\1\343\1\0\5\u0185\1\0\1\u0185\4\0"+
    "\2\u0185\3\0\2\u0185\1\0\1\343\6\0\2\u0185\33\0"+
    "\6\u0185\13\0\1\u0186\1\102\1\234\2\0\3\u0186\1\110"+
    "\1\111\1\112\12\0\1\112\1\0\1\234\6\0\1\113"+
    "\1\110\33\0\3\u0186\1\102\1\u0186\1\113\13\0\1\u0187"+
    "\1\102\1\234\2\0\3\u0187\1\110\1\111\1\112\12\0"+
    "\1\112\1\0\1\234\6\0\1\113\1\110\33\0\3\u0187"+
    "\1\102\1\u0187\1\113\107\0\1\u0188\15\0\13\11\1\0"+
    "\1\11\4\0\27\11\1\u0189\24\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\20\11\1\u018a\7\11"+
    "\24\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u018b\25\11\24\0\6\11\2\0\1\11"+
    "\10\0\2\u018c\1\343\1\0\5\u018c\1\0\1\u018c\4\0"+
    "\2\u018c\3\0\2\u018c\1\0\1\343\6\0\2\u018c\33\0"+
    "\6\u018c\13\0\1\u018d\1\102\1\234\2\0\3\u018d\1\110"+
    "\1\111\1\112\12\0\1\112\1\0\1\234\6\0\1\113"+
    "\1\110\33\0\3\u018d\1\102\1\u018d\1\113\13\0\1\u018e"+
    "\1\102\1\234\2\0\3\u018e\1\110\1\111\1\112\12\0"+
    "\1\112\1\0\1\234\6\0\1\113\1\110\33\0\3\u018e"+
    "\1\102\1\u018e\1\113\111\0\1\u018f\13\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\u0190\21\11\24\0\6\11\2\0"+
    "\1\11\10\0\2\u0191\1\343\1\0\5\u0191\1\0\1\u0191"+
    "\4\0\2\u0191\3\0\2\u0191\1\0\1\343\6\0\2\u0191"+
    "\33\0\6\u0191\13\0\1\u0192\1\102\1\234\2\0\3\u0192"+
    "\1\110\1\111\1\112\12\0\1\112\1\0\1\234\6\0"+
    "\1\113\1\110\33\0\3\u0192\1\102\1\u0192\1\113\13\0"+
    "\1\u0193\1\102\1\234\2\0\3\u0193\1\110\1\111\1\112"+
    "\12\0\1\112\1\0\1\234\6\0\1\113\1\110\33\0"+
    "\3\u0193\1\102\1\u0193\1\113\11\0\13\11\1\0\1\11"+
    "\4\0\17\11\1\u0194\10\11\24\0\6\11\2\0\1\11"+
    "\10\0\2\u0195\1\343\1\0\5\u0195\1\0\1\u0195\4\0"+
    "\2\u0195\3\0\2\u0195\1\0\1\343\6\0\2\u0195\33\0"+
    "\6\u0195\13\0\1\u0196\1\102\1\234\2\0\3\u0196\1\110"+
    "\1\111\1\112\12\0\1\112\1\0\1\234\6\0\1\113"+
    "\1\110\33\0\3\u0196\1\102\1\u0196\1\113\13\0\1\u0197"+
    "\1\102\1\234\2\0\3\u0197\1\110\1\111\1\112\12\0"+
    "\1\112\1\0\1\234\6\0\1\113\1\110\33\0\3\u0197"+
    "\1\102\1\u0197\1\113\13\0\2\u0198\1\343\1\0\5\u0198"+
    "\1\0\1\u0198\4\0\2\u0198\3\0\2\u0198\1\0\1\343"+
    "\6\0\2\u0198\33\0\6\u0198\13\0\1\u0199\1\102\1\234"+
    "\2\0\3\u0199\1\110\1\111\1\112\12\0\1\112\1\0"+
    "\1\234\6\0\1\113\1\110\33\0\3\u0199\1\102\1\u0199"+
    "\1\113\13\0\1\u019a\1\102\1\234\2\0\3\u019a\1\110"+
    "\1\111\1\112\12\0\1\112\1\0\1\234\6\0\1\113"+
    "\1\110\33\0\3\u019a\1\102\1\u019a\1\113\13\0\2\u019b"+
    "\1\343\1\0\5\u019b\1\0\1\u019b\4\0\2\u019b\3\0"+
    "\2\u019b\1\0\1\343\6\0\2\u019b\33\0\6\u019b\13\0"+
    "\1\u019c\1\102\1\234\2\0\3\u019c\1\110\1\111\1\112"+
    "\12\0\1\112\1\0\1\234\6\0\1\113\1\110\33\0"+
    "\3\u019c\1\102\1\u019c\1\113\13\0\1\u019d\1\102\1\234"+
    "\2\0\3\u019d\1\110\1\111\1\112\12\0\1\112\1\0"+
    "\1\234\6\0\1\113\1\110\33\0\3\u019d\1\102\1\u019d"+
    "\1\113\13\0\2\u019e\1\343\1\0\5\u019e\1\0\1\u019e"+
    "\4\0\2\u019e\3\0\2\u019e\1\0\1\343\6\0\2\u019e"+
    "\33\0\6\u019e\13\0\1\u019f\1\102\1\234\2\0\3\u019f"+
    "\1\110\1\111\1\112\12\0\1\112\1\0\1\234\6\0"+
    "\1\113\1\110\33\0\3\u019f\1\102\1\u019f\1\113\13\0"+
    "\1\u01a0\1\102\1\234\2\0\3\u01a0\1\110\1\111\1\112"+
    "\12\0\1\112\1\0\1\234\6\0\1\113\1\110\33\0"+
    "\3\u01a0\1\102\1\u01a0\1\113\13\0\2\u01a1\1\343\1\0"+
    "\5\u01a1\1\0\1\u01a1\4\0\2\u01a1\3\0\2\u01a1\1\0"+
    "\1\343\6\0\2\u01a1\33\0\6\u01a1\13\0\1\u01a2\1\102"+
    "\1\234\2\0\3\u01a2\1\110\1\111\1\112\12\0\1\112"+
    "\1\0\1\234\6\0\1\113\1\110\33\0\3\u01a2\1\102"+
    "\1\u01a2\1\113\13\0\1\u01a3\1\102\1\234\2\0\3\u01a3"+
    "\1\110\1\111\1\112\12\0\1\112\1\0\1\234\6\0"+
    "\1\113\1\110\33\0\3\u01a3\1\102\1\u01a3\1\113\13\0"+
    "\2\u01a4\1\343\1\0\5\u01a4\1\0\1\u01a4\4\0\2\u01a4"+
    "\3\0\2\u01a4\1\0\1\343\6\0\2\u01a4\33\0\6\u01a4"+
    "\13\0\1\u01a5\1\102\1\234\2\0\3\u01a5\1\110\1\111"+
    "\1\112\12\0\1\112\1\0\1\234\6\0\1\113\1\110"+
    "\33\0\3\u01a5\1\102\1\u01a5\1\113\15\0\1\343\24\0"+
    "\1\343\64\0\1\u01a6\1\102\1\234\2\0\3\u01a6\1\110"+
    "\1\111\1\112\12\0\1\112\1\0\1\234\6\0\1\113"+
    "\1\110\33\0\3\u01a6\1\102\1\u01a6\1\113\13\0\1\u01a7"+
    "\1\102\1\234\2\0\3\u01a7\1\110\1\111\1\112\12\0"+
    "\1\112\1\0\1\234\6\0\1\113\1\110\33\0\3\u01a7"+
    "\1\102\1\u01a7\1\113\13\0\1\u01a8\1\102\1\234\2\0"+
    "\3\u01a8\1\110\1\111\1\112\12\0\1\112\1\0\1\234"+
    "\6\0\1\113\1\110\33\0\3\u01a8\1\102\1\u01a8\1\113"+
    "\13\0\1\u01a9\1\102\1\234\2\0\3\u01a9\1\110\1\111"+
    "\1\112\12\0\1\112\1\0\1\234\6\0\1\113\1\110"+
    "\33\0\3\u01a9\1\102\1\u01a9\1\113\13\0\2\102\1\234"+
    "\2\0\3\102\1\110\1\111\1\112\12\0\1\112\1\0"+
    "\1\234\6\0\1\113\1\110\33\0\5\102\1\113\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23636];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\20\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\1\11\1\1\2\0"+
    "\2\11\2\1\1\11\1\0\3\1\1\11\1\1\1\0"+
    "\3\11\1\0\47\1\2\11\1\1\1\11\1\1\12\11"+
    "\2\1\11\11\12\1\2\0\1\11\5\1\2\0\56\1"+
    "\1\11\1\1\2\11\1\0\1\11\1\0\10\11\1\0"+
    "\1\1\1\11\3\1\1\0\55\1\1\11\3\1\1\0"+
    "\45\1\1\0\34\1\1\0\23\1\1\0\15\1\1\0"+
    "\11\1\1\0\3\1\1\0\2\1\1\11\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Token token(TokenType type) {
        return new Token(type, yyline+1, yycolumn+1);
    }
    
    private Token token(TokenType type, Object value) {
        return new Token(type, yyline+1, yycolumn+1, value);
    }
    
    private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 138: break;
        case 2: 
          { /* ignore */
          }
        case 139: break;
        case 3: 
          { return token(TokenType.DIV);
          }
        case 140: break;
        case 4: 
          { return token(TokenType.MULT);
          }
        case 141: break;
        case 5: 
          { return token(TokenType.IDENTIFIER);
          }
        case 142: break;
        case 6: 
          { return token(TokenType.FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 143: break;
        case 7: 
          { return token(TokenType.DOT);
          }
        case 144: break;
        case 8: 
          { return token(TokenType.MINUS);
          }
        case 145: break;
        case 9: 
          { string.setLength(0); yybegin(STRING);
          }
        case 146: break;
        case 10: 
          { yybegin(CHARLITERAL);
          }
        case 147: break;
        case 11: 
          { return token(TokenType.LPAREN);
          }
        case 148: break;
        case 12: 
          { return token(TokenType.RPAREN);
          }
        case 149: break;
        case 13: 
          { return token(TokenType.LBRACE);
          }
        case 150: break;
        case 14: 
          { return token(TokenType.RBRACE);
          }
        case 151: break;
        case 15: 
          { return token(TokenType.LBRACK);
          }
        case 152: break;
        case 16: 
          { return token(TokenType.RBRACK);
          }
        case 153: break;
        case 17: 
          { return token(TokenType.SEMICOLON);
          }
        case 154: break;
        case 18: 
          { return token(TokenType.COMMA);
          }
        case 155: break;
        case 19: 
          { return token(TokenType.EQ);
          }
        case 156: break;
        case 20: 
          { return token(TokenType.GT);
          }
        case 157: break;
        case 21: 
          { return token(TokenType.LT);
          }
        case 158: break;
        case 22: 
          { return token(TokenType.NOT);
          }
        case 159: break;
        case 23: 
          { return token(TokenType.COMP);
          }
        case 160: break;
        case 24: 
          { return token(TokenType.QUESTION);
          }
        case 161: break;
        case 25: 
          { return token(TokenType.COLON);
          }
        case 162: break;
        case 26: 
          { return token(TokenType.AND);
          }
        case 163: break;
        case 27: 
          { return token(TokenType.OR);
          }
        case 164: break;
        case 28: 
          { return token(TokenType.PLUS);
          }
        case 165: break;
        case 29: 
          { return token(TokenType.XOR);
          }
        case 166: break;
        case 30: 
          { return token(TokenType.MOD);
          }
        case 167: break;
        case 31: 
          { string.append( yytext() );
          }
        case 168: break;
        case 32: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 169: break;
        case 33: 
          { yybegin(YYINITIAL); return token(TokenType.STRING_LITERAL, string.toString());
          }
        case 170: break;
        case 34: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 171: break;
        case 35: 
          { return token(TokenType.DIVEQ);
          }
        case 172: break;
        case 36: 
          { return token(TokenType.MULTEQ);
          }
        case 173: break;
        case 37: 
          { return token(TokenType.INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
          }
        case 174: break;
        case 38: 
          { return token(TokenType.INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 175: break;
        case 39: 
          { return token(TokenType.FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
          }
        case 176: break;
        case 40: 
          { return token(TokenType.FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 177: break;
        case 41: 
          { return token(TokenType.MINUSMINUS);
          }
        case 178: break;
        case 42: 
          { return token(TokenType.MINUSEQ);
          }
        case 179: break;
        case 43: 
          { return token(TokenType.IF);
          }
        case 180: break;
        case 44: 
          { return token(TokenType.DO);
          }
        case 181: break;
        case 45: 
          { return token(TokenType.EQEQ);
          }
        case 182: break;
        case 46: 
          { return token(TokenType.GTEQ);
          }
        case 183: break;
        case 47: 
          { return token(TokenType.RSHIFT);
          }
        case 184: break;
        case 48: 
          { return token(TokenType.LTEQ);
          }
        case 185: break;
        case 49: 
          { return token(TokenType.LSHIFT);
          }
        case 186: break;
        case 50: 
          { return token(TokenType.NOTEQ);
          }
        case 187: break;
        case 51: 
          { return token(TokenType.ANDEQ);
          }
        case 188: break;
        case 52: 
          { return token(TokenType.ANDAND);
          }
        case 189: break;
        case 53: 
          { return token(TokenType.OREQ);
          }
        case 190: break;
        case 54: 
          { return token(TokenType.OROR);
          }
        case 191: break;
        case 55: 
          { return token(TokenType.PLUSEQ);
          }
        case 192: break;
        case 56: 
          { return token(TokenType.PLUSPLUS);
          }
        case 193: break;
        case 57: 
          { return token(TokenType.XOREQ);
          }
        case 194: break;
        case 58: 
          { return token(TokenType.MODEQ);
          }
        case 195: break;
        case 59: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 196: break;
        case 60: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                           string.append( val );
          }
        case 197: break;
        case 61: 
          { string.append( '\"' );
          }
        case 198: break;
        case 62: 
          { string.append( '\'' );
          }
        case 199: break;
        case 63: 
          { string.append( '\\' );
          }
        case 200: break;
        case 64: 
          { string.append( '\b' );
          }
        case 201: break;
        case 65: 
          { string.append( '\t' );
          }
        case 202: break;
        case 66: 
          { string.append( '\r' );
          }
        case 203: break;
        case 67: 
          { string.append( '\n' );
          }
        case 204: break;
        case 68: 
          { string.append( '\f' );
          }
        case 205: break;
        case 69: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, yytext().charAt(0));
          }
        case 206: break;
        case 70: 
          { return token(TokenType.INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
          }
        case 207: break;
        case 71: 
          { return token(TokenType.INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
          }
        case 208: break;
        case 72: 
          { return token(TokenType.TRY);
          }
        case 209: break;
        case 73: 
          { return token(TokenType.NEW);
          }
        case 210: break;
        case 74: 
          { return token(TokenType.INT);
          }
        case 211: break;
        case 75: 
          { return token(TokenType.FOR);
          }
        case 212: break;
        case 76: 
          { return token(TokenType.RSHIFTEQ);
          }
        case 213: break;
        case 77: 
          { return token(TokenType.URSHIFT);
          }
        case 214: break;
        case 78: 
          { return token(TokenType.LSHIFTEQ);
          }
        case 215: break;
        case 79: 
          { yybegin(YYINITIAL); 
                                          int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                        return token(TokenType.CHARACTER_LITERAL, (char)val);
          }
        case 216: break;
        case 80: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\"');
          }
        case 217: break;
        case 81: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\'');
          }
        case 218: break;
        case 82: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\\');
          }
        case 219: break;
        case 83: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\b');
          }
        case 220: break;
        case 84: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\t');
          }
        case 221: break;
        case 85: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\r');
          }
        case 222: break;
        case 86: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\n');
          }
        case 223: break;
        case 87: 
          { yybegin(YYINITIAL); return token(TokenType.CHARACTER_LITERAL, '\f');
          }
        case 224: break;
        case 88: 
          { return token(TokenType.INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
          }
        case 225: break;
        case 89: 
          { return token(TokenType.BYTE);
          }
        case 226: break;
        case 90: 
          { return token(TokenType.BOOLEAN_LITERAL, true);
          }
        case 227: break;
        case 91: 
          { return token(TokenType.THIS);
          }
        case 228: break;
        case 92: 
          { return token(TokenType.CASE);
          }
        case 229: break;
        case 93: 
          { return token(TokenType.CHAR);
          }
        case 230: break;
        case 94: 
          { return token(TokenType.ELSE);
          }
        case 231: break;
        case 95: 
          { return token(TokenType.ENUM);
          }
        case 232: break;
        case 96: 
          { return token(TokenType.LONG);
          }
        case 233: break;
        case 97: 
          { return token(TokenType.NULL_LITERAL);
          }
        case 234: break;
        case 98: 
          { return token(TokenType.GOTO);
          }
        case 235: break;
        case 99: 
          { return token(TokenType.VOID);
          }
        case 236: break;
        case 100: 
          { return token(TokenType.URSHIFTEQ);
          }
        case 237: break;
        case 101: 
          { return token(TokenType.BREAK);
          }
        case 238: break;
        case 102: 
          { return token(TokenType.SHORT);
          }
        case 239: break;
        case 103: 
          { return token(TokenType.SUPER);
          }
        case 240: break;
        case 104: 
          { return token(TokenType.THROW);
          }
        case 241: break;
        case 105: 
          { return token(TokenType.CATCH);
          }
        case 242: break;
        case 106: 
          { return token(TokenType.CONST);
          }
        case 243: break;
        case 107: 
          { return token(TokenType.CLASS);
          }
        case 244: break;
        case 108: 
          { return token(TokenType.BOOLEAN_LITERAL, false);
          }
        case 245: break;
        case 109: 
          { return token(TokenType.FLOAT);
          }
        case 246: break;
        case 110: 
          { return token(TokenType.FINAL);
          }
        case 247: break;
        case 111: 
          { return token(TokenType.WHILE);
          }
        case 248: break;
        case 112: 
          { return token(TokenType.ASSERT);
          }
        case 249: break;
        case 113: 
          { return token(TokenType.STATIC);
          }
        case 250: break;
        case 114: 
          { return token(TokenType.SWITCH);
          }
        case 251: break;
        case 115: 
          { return token(TokenType.THROWS);
          }
        case 252: break;
        case 116: 
          { return token(TokenType.RETURN);
          }
        case 253: break;
        case 117: 
          { return token(TokenType.NATIVE);
          }
        case 254: break;
        case 118: 
          { return token(TokenType.IMPORT);
          }
        case 255: break;
        case 119: 
          { return token(TokenType.DOUBLE);
          }
        case 256: break;
        case 120: 
          { return token(TokenType.PUBLIC);
          }
        case 257: break;
        case 121: 
          { return token(TokenType.BOOLEAN);
          }
        case 258: break;
        case 122: 
          { return token(TokenType.EXTENDS);
          }
        case 259: break;
        case 123: 
          { return token(TokenType.DEFAULT);
          }
        case 260: break;
        case 124: 
          { return token(TokenType.FINALLY);
          }
        case 261: break;
        case 125: 
          { return token(TokenType.PACKAGE);
          }
        case 262: break;
        case 126: 
          { return token(TokenType.PRIVATE);
          }
        case 263: break;
        case 127: 
          { return token(TokenType.ABSTRACT);
          }
        case 264: break;
        case 128: 
          { return token(TokenType.STRICTFP);
          }
        case 265: break;
        case 129: 
          { return token(TokenType.CONTINUE);
          }
        case 266: break;
        case 130: 
          { return token(TokenType.VOLATILE);
          }
        case 267: break;
        case 131: 
          { return token(TokenType.TRANSIENT);
          }
        case 268: break;
        case 132: 
          { return token(TokenType.INTERFACE);
          }
        case 269: break;
        case 133: 
          { return token(TokenType.PROTECTED);
          }
        case 270: break;
        case 134: 
          { return token(TokenType.INSTANCEOF);
          }
        case 271: break;
        case 135: 
          { return token(TokenType.IMPLEMENTS);
          }
        case 272: break;
        case 136: 
          { return token(TokenType.INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 273: break;
        case 137: 
          { return token(TokenType.SYNCHRONIZED);
          }
        case 274: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return token(TokenType.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
